<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.1.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task-4.1.xsd">


	<!-- 注解的自动扫描 -->
	<context:component-scan base-package="com.ssh" />

	<!-- property文件 -->
    <context:property-placeholder location="classpath:*.properties"/>

	<!-- 定义数据源的信息 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 初始化连接数量 type:int -->
        <property name="initialSize" value="${druid.initialSize}" />
        <!-- 最大并发数量 type:int -->
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 最大空闲数量 type:int -->
        <property name="maxIdle" value="${druid.maxIdle}" />
        <!-- 最小空闲数量 type:int-->
        <property name="minIdle" value="${druid.minIdle}" />
        <!-- 配置获取连接等待超时的时间,单位：毫秒 type:long -->
        <property name="maxWait" value="${druid.maxWait}" />
        <!-- 超过时间限制是否回收 type:boolean -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
        <!-- 上述回收超时时间 单位：秒 type:long -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
        <property name="logAbandoned" value="${druid.logAbandoned}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句 type:sql -->
        <property name="validationQuery" value="${druid.validationQuery}" />
        <!-- 申请连接的时候检测 type:boolean -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 开启PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
		                监控统计用的filter:stat
		                日志用的filter:log4j
		               防御SQL注入的filter:wall -->
        <property name="filters" value="${druid.filters}" />
	</bean>
	
	<!-- hibernate配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mappingLocations">
        	<list>
				<value>classpath*:com/ssh/entity/*.hbm.xml</value>
			</list>
        </property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.cache.provider_class"> org.hibernate.cache.EhCacheProvider </prop> 
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>   
				<prop key="hibernate.cache.use_query_cache"> true </prop>  
				<prop key="hibernate.cache.use_second_level_cache"> true </prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="show_sql">true</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
			</props>
		</property>
    </bean>
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate" >
    	<property name="sessionFactory" ref="sessionFactory" /> 
    </bean>

	<!-- 事务管理 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <tx:advice id="txAdivce" transaction-manager="transactionManager">
        <tx:attributes>
        	<tx:method name="get*" propagation="REQUIRED" read-only="true" rollback-for="Exception"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true" rollback-for="Exception"/>
            <tx:method name="create*" propagation="REQUIRED" read-only="false"  rollback-for="Exception"/>
            <tx:method name="register*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* com.ssh.service.*.*(..))" />
        <aop:advisor advice-ref="txAdivce" pointcut-ref="pointcut"/>
    </aop:config>
    <aop:aspectj-autoproxy/>

</beans>